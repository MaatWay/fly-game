class FlyGame {
    constructor() {
        this.gridSize = 5;
        this.flyPosition = { x: 2, y: 2 };
        this.moves = [];
        this.currentMoveIndex = 0;
        this.speed = 1000;
        this.totalMoves = 10;
        this.gameActive = false;
        this.countdownTimeout = null;
        this.moveTimeout = null;

        this.initializeElements();
        this.bindEvents();
    }

    initializeElements() {
        this.speedSlider = document.getElementById('speed');
        this.speedValue = document.getElementById('speed-value');
        this.gridSizeSelect = document.getElementById('grid-size');
        this.movesCountInput = document.getElementById('moves-count');
        this.startButton = document.getElementById('start-game');
        this.grid = document.getElementById('grid');
        this.progressDiv = document.getElementById('progress');
        this.resultModal = document.getElementById('result-modal');
        this.resultTitle = document.getElementById('result-title');
        this.resultMessage = document.getElementById('result-message');
        this.playAgainButton = document.getElementById('play-again');
        this.toggleInstructionBtn = document.getElementById('toggle-instruction');
        this.instructionDiv = document.getElementById('instruction');
        this.countdownOverlay = document.getElementById('countdown-overlay');
        this.moveDisplayDiv = document.getElementById('move-display');
    }

    bindEvents() {
        this.speedSlider.addEventListener('input', (e) => {
            this.speed = parseFloat(e.target.value) * 1000;
            this.speedValue.textContent = e.target.value;
        });

        this.gridSizeSelect.addEventListener('change', (e) => {
            this.gridSize = parseInt(e.target.value);
            this.createGrid();
        });

        this.startButton.addEventListener('click', () => this.startGame());
        this.playAgainButton.addEventListener('click', () => this.resetGame());

        this.toggleInstructionBtn.addEventListener('click', () => {
            if (this.instructionDiv.classList.contains('hidden')) {
                this.instructionDiv.classList.remove('hidden');
                this.toggleInstructionBtn.textContent = "–°–∫—Ä—ã—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é";
            } else {
                this.instructionDiv.classList.add('hidden');
                this.toggleInstructionBtn.textContent = "–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é";
            }
        });

        this.createGrid();
    }

    createGrid() {
        this.grid.innerHTML = '';
        this.grid.style.gridTemplateColumns = `repeat(${this.gridSize}, 1fr)`;

        for (let i = 0; i < this.gridSize * this.gridSize; i++) {
            const cell = document.createElement('div');
            cell.className = 'grid-cell';
            cell.addEventListener('click', () => this.handleCellClick(i));
            this.grid.appendChild(cell);
        }
    }

    generateMoves() {
        const directions = ['–≤–≤–µ—Ä—Ö', '–≤–Ω–∏–∑', '–≤–ª–µ–≤–æ', '–≤–ø—Ä–∞–≤–æ'];
        this.moves = [];
        let pos = {
            x: Math.floor(this.gridSize / 2),
            y: Math.floor(this.gridSize / 2)
        };

        for (let i = 0; i < this.totalMoves; i++) {
            let possible = [];
            if (pos.y > 0) possible.push('–≤–≤–µ—Ä—Ö');
            if (pos.y < this.gridSize - 1) possible.push('–≤–Ω–∏–∑');
            if (pos.x > 0) possible.push('–≤–ª–µ–≤–æ');
            if (pos.x < this.gridSize - 1) possible.push('–≤–ø—Ä–∞–≤–æ');
            const dir = possible[Math.floor(Math.random() * possible.length)];
            this.moves.push(dir);
            switch (dir) {
                case '–≤–≤–µ—Ä—Ö': pos.y -= 1; break;
                case '–≤–Ω–∏–∑': pos.y += 1; break;
                case '–≤–ª–µ–≤–æ': pos.x -= 1; break;
                case '–≤–ø—Ä–∞–≤–æ': pos.x += 1; break;
            }
        }
    }

    startGame() {
        this.gridSize = parseInt(this.gridSizeSelect.value);
        this.totalMoves = parseInt(this.movesCountInput.value);
        this.speed = parseFloat(this.speedSlider.value) * 1000;

        this.flyPosition = {
            x: Math.floor(this.gridSize / 2),
            y: Math.floor(this.gridSize / 2)
        };

        this.createGrid();
        this.generateMoves();
        this.currentMoveIndex = 0;
        this.gameActive = true;
        this.startButton.disabled = true;
        this.progressDiv.textContent = '';
        this.moveDisplayDiv.textContent = '';
        this.moveDisplayDiv.classList.add('empty');
        this.showCountdown(3, () => {
            this.executeNextMove();
        });
    }

    showCountdown(seconds, callback) {
        this.countdownOverlay.classList.remove('hidden');
        let remaining = seconds;
        this.countdownOverlay.textContent = remaining;
        const tick = () => {
            remaining -= 1;
            if (remaining > 0) {
                this.countdownOverlay.textContent = remaining;
                this.countdownTimeout = setTimeout(tick, 1000);
            } else {
                this.countdownOverlay.classList.add('hidden');
                this.countdownOverlay.textContent = '';
                if (typeof callback === 'function') callback();
            }
        };
        this.countdownTimeout = setTimeout(tick, 1000);
    }

    speakCommand(command) {
        if ('speechSynthesis' in window) {
            const utter = new window.SpeechSynthesisUtterance(command);
            utter.lang = 'ru-RU';
            window.speechSynthesis.cancel();
            window.speechSynthesis.speak(utter);
        }
    }

    executeNextMove() {
        if (this.currentMoveIndex >= this.moves.length) {
            this.moveDisplayDiv.textContent = '';
            this.moveDisplayDiv.classList.add('empty');
            this.endMovementPhase();
            return;
        }

        // 1. –ü–∞—É–∑–∞ 250 –º—Å (–ø—É—Å—Ç–æ)
        this.moveDisplayDiv.textContent = '';
        this.moveDisplayDiv.classList.add('empty');

        this.moveTimeout = setTimeout(() => {
            // 2. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –∏ –æ–∑–≤—É—á–∏–≤–∞–µ–º
            const move = this.moves[this.currentMoveIndex];
            this.moveDisplayDiv.textContent = move;
            this.moveDisplayDiv.classList.remove('empty');
            this.progressDiv.textContent = `${this.currentMoveIndex + 1} / ${this.totalMoves}`;
            this.speakCommand(move);
            this.applyMove(move);

            this.currentMoveIndex++;

            // –ß–µ—Ä–µ–∑ this.speed –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ ‚Äî —Å–ª–µ–¥—É—é—â–∏–π —Ö–æ–¥
            this.moveTimeout = setTimeout(() => {
                this.executeNextMove();
            }, this.speed);
        }, 250);
    }

    applyMove(direction) {
        const newPos = { ...this.flyPosition };
        switch (direction) {
            case '–≤–≤–µ—Ä—Ö':
                if (newPos.y > 0) newPos.y -= 1;
                break;
            case '–≤–Ω–∏–∑':
                if (newPos.y < this.gridSize - 1) newPos.y += 1;
                break;
            case '–≤–ª–µ–≤–æ':
                if (newPos.x > 0) newPos.x -= 1;
                break;
            case '–≤–ø—Ä–∞–≤–æ':
                if (newPos.x < this.gridSize - 1) newPos.x += 1;
                break;
        }
        this.flyPosition = newPos;
    }

    endMovementPhase() {
        this.moveDisplayDiv.textContent = '–ì–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –º—É—Ö–∞? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–ª–µ—Ç–∫—É!';
        this.progressDiv.textContent = '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–∑–∏—Ü–∏—é –º—É—Ö–∏';
        this.gameActive = false;
    }

    handleCellClick(cellIndex) {
        if (this.gameActive) return;

        const x = cellIndex % this.gridSize;
        const y = Math.floor(cellIndex / this.gridSize);

        const correct = (x === this.flyPosition.x && y === this.flyPosition.y);

        this.showResult(correct, cellIndex);
    }

    showResult(correct, selectedIndex) {
        const correctIndex = this.flyPosition.y * this.gridSize + this.flyPosition.x;

        this.clearGrid();

        const selectedCell = this.grid.children[selectedIndex];
        selectedCell.classList.add(correct ? 'correct' : 'wrong');
        selectedCell.textContent = 'üëÜ';

        if (!correct) {
            const correctCell = this.grid.children[correctIndex];
            correctCell.classList.add('correct');
            correctCell.textContent = 'ü™∞';
        } else {
            selectedCell.textContent = 'ü™∞';
        }

        this.resultTitle.textContent = correct ? '–í–µ—Ä–Ω–æ!' : '–ù–µ –≤–µ—Ä–Ω–æ!';
        this.resultMessage.innerHTML =
            (correct
                ? '–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç—Å–ª–µ–¥–∏–ª–∏ –º—É—Ö—É.'
                : `–ú—É—Ö–∞ –Ω–∞—Ö–æ–¥–∏–ª–∞—Å—å –≤ –ø–æ–∑–∏—Ü–∏–∏ (${this.flyPosition.x + 1}, ${this.flyPosition.y + 1}).`)
            + '<br><br>–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –º–µ–Ω—è, –ø–æ–¥–ø–∏—Å–∞–≤—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –≤ —Ç–µ–ª–µ–≥—Ä–∞–º: <a href="https://t.me/ResourcesfulLab" target="_blank">–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è –†–µ—Å—É—Ä—Å–æ–≤</a>';

        this.resultModal.classList.remove('hidden');
    }

    clearGrid() {
        Array.from(this.grid.children).forEach(cell => {
            cell.className = 'grid-cell';
            cell.textContent = '';
        });
    }

    resetGame() {
        this.resultModal.classList.add('hidden');
        this.startButton.disabled = false;
        this.clearGrid();
        this.progressDiv.textContent = '';
        this.gameActive = false;
        if (this.countdownTimeout) {
            clearTimeout(this.countdownTimeout);
        }
        if (this.moveTimeout) {
            clearTimeout(this.moveTimeout);
        }
        this.countdownOverlay.classList.add('hidden');
        this.countdownOverlay.textContent = '';
        this.moveDisplayDiv.textContent = '';
        this.moveDisplayDiv.classList.add('empty');
    }
}

document.addEventListener('DOMContentLoaded', () => {
    new FlyGame();
});
